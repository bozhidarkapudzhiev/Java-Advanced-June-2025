Метод                    Описание
boolean add(E element)
       Добавяне на елемент. Връща true, ако елементът е успешно добавен.
       Връща false, ако елементът вече съществува в Set-а (тъй като дубликати не са позволени).


boolean addAll(Collection c)
	  Добавя всички елементи от друга колекция в Set-а. Връща true, ако Set-ът се е променил.
	  Дубликатите се игнорират.

boolean remove(Object o)
      Премахва конкретен елемент от Set-а. Връща true, ако елементът е премахнат успешно.


boolean removeAll(Collection c)
          Премахва всички елементи от Set-а, които се съдържат в дадена колекция.
          Използва се за намиране на разликата (difference) между два Set-а.


boolean retainAll(Collection c)
        Задържа само тези елементи в Set-а, които се съдържат и в дадената колекция.
        Използва се за намиране на пресичането (intersection) на два Set-а.


boolean contains(Object o)
      Проверява дали Set-ът съдържа даден елемент.
      Работи изключително бързо благодарение на хеширането.


boolean containsAll(Collection c)
      Проверява дали Set-ът съдържа всички елементи от дадена колекция.


int size()
      Връща броя на уникалните елементи в Set-а.


boolean isEmpty()
     Проверява дали Set-ът е празен (т.е., дали няма елементи). Връща true, ако е празен.


void clear()
     Премахва всички елементи от Set-а.


Iterator<E> iterator()
    Връща Iterator за обхождане на елементите в Set-а.
    Редът на обхождане зависи от имплементацията
        -HashSet - произволен,
        -LinkedHashSet - по реда на добавяне,
        -TreeSet - сортиран).


Object[] toArray()
	    Преобразува елементите от Set-а в масив (Array).


boolean equals(Object o)
        Сравнява Set-а с друг обект за равенство.
        Двата _01_Sets са равни, ако имат еднакви елементи, независимо от реда им.

int hashCode()	Връща хеш кода на Set-а.
        Използва се при сравнение на _01_Sets.
