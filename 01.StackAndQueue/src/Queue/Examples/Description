Опашката е линейна структура от данни , която следва принципа FIFO (First-In, First-Out) –
първият елемент , който е добавен , е първия който се премахва .Представете си го като опашка от хора на каса в магазин.
Първия човек , който се е наредил , е първия обслужен.
Основни операции :
•	offer(): Добавяне на елемент в края на опашката.
•	poll(): Премахване и връща елемент от началото на опашката
•	peek(): Връща елемента от началото на опашката , без да го премахва .
•	isEmpty(): Проверява дали опашката е празна .
Кога  да използваме Queue ?
•	Планиране на задачи  (task Scheduling) : В операционните системи , опашката се използва за управление на задачите, които чакат да бъдат изпълнени от процесора.
•	Буферизиране на данни : Когато данните пристигат по-бързо ,от колкото могат да бъдат обработени, те се поставят в опашка, за да се обработят в реда на пристигане.
•	Търсене в ширина (BFS – Breadth-First Search): При обхождане на дърво или граф , опашката се използва за проследяване на възлите , които трябва да бъдат посетени.
Добри практики :
•	Използвайте LinkedList или ArrayDeque . Queue е само интерфейс , така че трябва да използвате някоя от неговите реализации. ArrayDeque е много добър  избор за обикновени опашки , докато LinkedList  може да е по-подходящ , ако имате нужда от често
