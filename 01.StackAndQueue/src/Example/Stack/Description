Стекът е линейна структура от данни, която следва LIFO (Last-In, First-Out) –
 последният елемент , който е добавен е първия който се премахва .Представете си го като купчина от чинии.
 За да вземете чиния от дъното , първо трябва да премахнете всички чинии над нея.
Основни операции:
•	push() : Добавя елемент на върха на стека .
•	pop() : Премахва и връща елемент от върха на стека.
•	peek() : Връща елемент от върха на стека ,без да го премахва.
•	isEmpty(): Проверява дали стекът е празен.
Кога да използваме Stack ?
•	Undo/Redo функционалност: В текстов редактор, всеки път когато потребителя направи промяна ,запазва предишното състояние в стека .
Командата „Undo”  просто изважда последното състояние от стека и го възстановява.
•	Обръщане на данни: За обръщане на низ или списък. Добавете  всеки елемент в стека и след това ги извадете ,като автоматично ще обърнете
реда им.
•	Рекурсия и обработка на извиквания: Системните стекове се използва за проследяване на извикванията на методите.
Всеки път, когато се извика нов метод , той се „push“-ва в стека .Когато методът завърши , той се “pop“-ва.
•	Проверка за балансирани скоби :Можете да използвате стек, за да проверите дали скобите в даден израз са балансирани .
Добавете всяка отваряща скоба в стека и при срещане на затваряща скоба , проверете дали съвпада с тази на върха на стека.

Добра практика :
•	В Java използвайте ArrayDeque вместо java.util. Stack.Класът Stack  е стар и е наследен от Vector,което го прави по-бавен и
нишково-безопасен (което обикновено не е необходимо за един стек) . ArrayDeque е по-ефективна и модерна реализация ,която предоставя
същите функционалности

